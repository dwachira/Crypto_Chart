/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crypto_chart;

import com.sun.rowset.internal.Row;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import javax.imageio.ImageIO;
import java.io.IOException;
import java.net.URL;
import java.awt.print.*;
import java.nio.file.Path;
import java.text.MessageFormat;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jxl.Sheet;
import jxl.Workbook;

public class Crypto_Chart_UI extends javax.swing.JFrame 
{
    
    
    public Crypto_Chart_UI() 
    {
        initComponents();
        setIcon();
        JButton_Print_JTable_to_PDF.setVisible(false);
        JButton_Export_Table_to_Excel_XLS_Format.setVisible(false);
        jTable1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        JPanel_cryptocurrency = new javax.swing.JPanel();
        JComboBox_select_cryptocurrency = new javax.swing.JComboBox<>();
        JLabel_select_cryptocurrency = new javax.swing.JLabel();
        JLabel_id_cryptocurrency = new javax.swing.JLabel();
        JLabel_id_of_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_name_cryptocurrency = new javax.swing.JLabel();
        JLabel_name_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_symbol_cryptocurrency = new javax.swing.JLabel();
        JLabel_symbol_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_rank_cryptocurrency = new javax.swing.JLabel();
        JLabel_rank_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_price_usd_cryptocurrency = new javax.swing.JLabel();
        JLabel_price_usd_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_price_btc_cryptocurrency = new javax.swing.JLabel();
        JLabel_price_btc_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_24hr_volume_cryptocurrency = new javax.swing.JLabel();
        JLabel_24hr_volume_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_percentage_change_7d_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_percentage_change_7d_cryptocurrency = new javax.swing.JLabel();
        JLabel_percentage_change_24hr_cryptocurrency = new javax.swing.JLabel();
        JLabel_percentage_change_24hr_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_percentage_change_1hr_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_percentage_change_1hr_cryptocurrency = new javax.swing.JLabel();
        JLabel_max_supply_cryptocurrency = new javax.swing.JLabel();
        JLabel_max_supply_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_total_supply_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_total_supply_cryptocurrency = new javax.swing.JLabel();
        JLabel_available_supply_cryptocurrency = new javax.swing.JLabel();
        JLabel_available_supply_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_market_cap_usd_cryptocurrency_value = new javax.swing.JLabel();
        JLabel_market_cap_usd_cryptocurrency = new javax.swing.JLabel();
        JLabel_last_updated_cryptocurrency = new javax.swing.JLabel();
        JLabel_last_updated_cryptocurrency_value = new javax.swing.JLabel();
        JButton_Cryptocurrency_chart_Enter = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        JButton_Export_Table_to_Excel_XLS_Format = new javax.swing.JButton();
        JButton_Print_JTable_to_PDF = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        JLabel_BTC_label = new javax.swing.JLabel();
        JLabel_ETH_label = new javax.swing.JLabel();
        JLabel_XRP_label = new javax.swing.JLabel();
        JLabel_ADA_label = new javax.swing.JLabel();
        JLabel_XLM_label = new javax.swing.JLabel();
        JLabel_MIOTA_label = new javax.swing.JLabel();
        JLabel_TRX_label = new javax.swing.JLabel();
        JLabel_VEN_label = new javax.swing.JLabel();
        JLabel_OMG_label = new javax.swing.JLabel();
        JLabel_XVG_label = new javax.swing.JLabel();
        JLabel_KCS_label = new javax.swing.JLabel();
        JLabel_UTK_label = new javax.swing.JLabel();
        JTextfield_BTC_value = new javax.swing.JTextField();
        JTextfield_ETH_value = new javax.swing.JTextField();
        JTextfield_XRP_value = new javax.swing.JTextField();
        JTextfield_ADA_value = new javax.swing.JTextField();
        JTextfield_XLM_value = new javax.swing.JTextField();
        JTextfield_MIOTA_value = new javax.swing.JTextField();
        JTextfield_TRX_value = new javax.swing.JTextField();
        JTextfield_VEN_value = new javax.swing.JTextField();
        JTextfield_OMG_value = new javax.swing.JTextField();
        JTextfield_XVG_value = new javax.swing.JTextField();
        JTextfield_KCS_value = new javax.swing.JTextField();
        JTextfield_UTK_value = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        JLabel_BRD_label = new javax.swing.JLabel();
        JTextfield_BRD_value = new javax.swing.JTextField();
        JLabel_APPC_label = new javax.swing.JLabel();
        JTextfield_APPC_value = new javax.swing.JTextField();
        JLabel_SUB_label = new javax.swing.JLabel();
        JTextfield_SUB_value = new javax.swing.JTextField();
        JLabel_CV_label = new javax.swing.JLabel();
        JTextfield_CV_value = new javax.swing.JTextField();
        JButton_Portfolio_Get_Value = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTextArea_portfolio_value = new javax.swing.JTextArea();
        JButton_Portfolio_value_chart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRYPTO CHART");
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/top_banner.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JComboBox_select_cryptocurrency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cryptocurrency", "Bitcoin (BTC)", "Ethereum (ETH)", "Ripple (XRP)", "Cardano (ADA)", "Stellar (XLM)", "IOTA (MIOTA)", "TRON (TRX)", "VeChain (VEN)", "OmiseGO (OMG)", "Verge (XVG)", "KuCoin Shares (KCS)", "UTRUST (UTK)", "Bread (BRD)", "AppCoins (APPC)", "Substratum (SUB)", "carVertical (CV)" }));
        JComboBox_select_cryptocurrency.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JComboBox_select_cryptocurrencyMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                JComboBox_select_cryptocurrencyMouseReleased(evt);
            }
        });

        JLabel_select_cryptocurrency.setText("Select Cryptocurrency :");

        JLabel_id_cryptocurrency.setText("ID:");

        JLabel_id_of_cryptocurrency_value.setText("value_id");

        JLabel_name_cryptocurrency.setText("Name:");

        JLabel_name_cryptocurrency_value.setText("value_name");

        JLabel_symbol_cryptocurrency.setText("Symbol:");

        JLabel_symbol_cryptocurrency_value.setText("value_symbol");

        JLabel_rank_cryptocurrency.setText("Rank:");

        JLabel_rank_cryptocurrency_value.setText("value_rank");

        JLabel_price_usd_cryptocurrency.setText("Price USD:");

        JLabel_price_usd_cryptocurrency_value.setText("value_price_usd");

        JLabel_price_btc_cryptocurrency.setText("Price BTC:");

        JLabel_price_btc_cryptocurrency_value.setText("value_price_btc");

        JLabel_24hr_volume_cryptocurrency.setText("24 hr Volume:");

        JLabel_24hr_volume_cryptocurrency_value.setText("value_24h_volume_usd");

        JLabel_percentage_change_7d_cryptocurrency_value.setText("value_percent_change_7d");

        JLabel_percentage_change_7d_cryptocurrency.setText("% Change 7d:");

        JLabel_percentage_change_24hr_cryptocurrency.setText("% Change 24 hr:");

        JLabel_percentage_change_24hr_cryptocurrency_value.setText("value_percent_change_24h");

        JLabel_percentage_change_1hr_cryptocurrency_value.setText("value_percent_change_1h");
        JLabel_percentage_change_1hr_cryptocurrency_value.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                JLabel_percentage_change_1hr_cryptocurrency_valueComponentShown(evt);
            }
        });
        JLabel_percentage_change_1hr_cryptocurrency_value.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JLabel_percentage_change_1hr_cryptocurrency_valuePropertyChange(evt);
            }
        });

        JLabel_percentage_change_1hr_cryptocurrency.setText("% Change 1 hr:");

        JLabel_max_supply_cryptocurrency.setText("Max Supply:");

        JLabel_max_supply_cryptocurrency_value.setText("value_max_supply");

        JLabel_total_supply_cryptocurrency_value.setText("value_total_supply");

        JLabel_total_supply_cryptocurrency.setText("Total Supply:");

        JLabel_available_supply_cryptocurrency.setText("Available Supply:");

        JLabel_available_supply_cryptocurrency_value.setText("value_available_supply");

        JLabel_market_cap_usd_cryptocurrency_value.setText("value_market_cap_usd");

        JLabel_market_cap_usd_cryptocurrency.setText("Market Cap USD:");

        JLabel_last_updated_cryptocurrency.setText("Last Updated:");

        JLabel_last_updated_cryptocurrency_value.setText("value_last_updated");

        JButton_Cryptocurrency_chart_Enter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/gtk_find_and_replace.png"))); // NOI18N
        JButton_Cryptocurrency_chart_Enter.setText("Enter");
        JButton_Cryptocurrency_chart_Enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JButton_Cryptocurrency_chart_EnterMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout JPanel_cryptocurrencyLayout = new javax.swing.GroupLayout(JPanel_cryptocurrency);
        JPanel_cryptocurrency.setLayout(JPanel_cryptocurrencyLayout);
        JPanel_cryptocurrencyLayout.setHorizontalGroup(
            JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                        .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_id_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabel_id_of_cryptocurrency_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_name_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabel_name_cryptocurrency_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_symbol_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabel_symbol_cryptocurrency_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_rank_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabel_rank_cryptocurrency_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_price_btc_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabel_price_btc_cryptocurrency_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_24hr_volume_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JLabel_24hr_volume_cryptocurrency_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                                .addComponent(JLabel_price_usd_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabel_price_usd_cryptocurrency_value, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(60, 60, 60)
                        .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(JLabel_market_cap_usd_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JLabel_available_supply_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JLabel_total_supply_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JLabel_max_supply_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JLabel_percentage_change_1hr_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JLabel_percentage_change_24hr_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                            .addComponent(JLabel_percentage_change_7d_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JLabel_last_updated_cryptocurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                        .addComponent(JLabel_select_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JComboBox_select_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JLabel_percentage_change_1hr_cryptocurrency_value, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(JLabel_percentage_change_7d_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel_percentage_change_24hr_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel_last_updated_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(JButton_Cryptocurrency_chart_Enter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel_market_cap_usd_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel_available_supply_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel_total_supply_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel_max_supply_cryptocurrency_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        JPanel_cryptocurrencyLayout.setVerticalGroup(
            JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JComboBox_select_cryptocurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JLabel_select_cryptocurrency))
                    .addComponent(JButton_Cryptocurrency_chart_Enter, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                        .addComponent(JLabel_market_cap_usd_cryptocurrency_value)
                        .addGap(18, 18, 18)
                        .addComponent(JLabel_available_supply_cryptocurrency_value)
                        .addGap(18, 18, 18)
                        .addComponent(JLabel_total_supply_cryptocurrency_value)
                        .addGap(18, 18, 18)
                        .addComponent(JLabel_max_supply_cryptocurrency_value)
                        .addGap(18, 18, 18)
                        .addComponent(JLabel_percentage_change_1hr_cryptocurrency_value)
                        .addGap(18, 18, 18)
                        .addComponent(JLabel_percentage_change_24hr_cryptocurrency_value)
                        .addGap(18, 18, 18)
                        .addComponent(JLabel_percentage_change_7d_cryptocurrency_value))
                    .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_id_cryptocurrency)
                                .addComponent(JLabel_id_of_cryptocurrency_value))
                            .addGap(18, 18, 18)
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_name_cryptocurrency)
                                .addComponent(JLabel_name_cryptocurrency_value))
                            .addGap(18, 18, 18)
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_symbol_cryptocurrency)
                                .addComponent(JLabel_symbol_cryptocurrency_value))
                            .addGap(18, 18, 18)
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_rank_cryptocurrency)
                                .addComponent(JLabel_rank_cryptocurrency_value))
                            .addGap(18, 18, 18)
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_price_usd_cryptocurrency)
                                .addComponent(JLabel_price_usd_cryptocurrency_value))
                            .addGap(18, 18, 18)
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_price_btc_cryptocurrency)
                                .addComponent(JLabel_price_btc_cryptocurrency_value))
                            .addGap(18, 18, 18)
                            .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabel_24hr_volume_cryptocurrency)
                                .addComponent(JLabel_24hr_volume_cryptocurrency_value)))
                        .addGroup(JPanel_cryptocurrencyLayout.createSequentialGroup()
                            .addComponent(JLabel_market_cap_usd_cryptocurrency)
                            .addGap(18, 18, 18)
                            .addComponent(JLabel_available_supply_cryptocurrency)
                            .addGap(18, 18, 18)
                            .addComponent(JLabel_total_supply_cryptocurrency)
                            .addGap(18, 18, 18)
                            .addComponent(JLabel_max_supply_cryptocurrency)
                            .addGap(18, 18, 18)
                            .addComponent(JLabel_percentage_change_1hr_cryptocurrency)
                            .addGap(18, 18, 18)
                            .addComponent(JLabel_percentage_change_24hr_cryptocurrency)
                            .addGap(18, 18, 18)
                            .addComponent(JLabel_percentage_change_7d_cryptocurrency))))
                .addGap(18, 18, 18)
                .addGroup(JPanel_cryptocurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabel_last_updated_cryptocurrency)
                    .addComponent(JLabel_last_updated_cryptocurrency_value))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cryptocurrency", new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/coins.png")), JPanel_cryptocurrency); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        JButton_Export_Table_to_Excel_XLS_Format.setText("Export Table to Excel XLS Format");
        JButton_Export_Table_to_Excel_XLS_Format.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JButton_Export_Table_to_Excel_XLS_FormatMouseClicked(evt);
            }
        });

        JButton_Print_JTable_to_PDF.setText("Print");
        JButton_Print_JTable_to_PDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JButton_Print_JTable_to_PDFMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 254, Short.MAX_VALUE)
                        .addComponent(JButton_Print_JTable_to_PDF, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JButton_Export_Table_to_Excel_XLS_Format, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JButton_Export_Table_to_Excel_XLS_Format)
                    .addComponent(JButton_Print_JTable_to_PDF))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Table of Crypto currencies", new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/emblem_money.png")), jPanel3); // NOI18N

        JLabel_BTC_label.setText("BTC");

        JLabel_ETH_label.setText("ETH");

        JLabel_XRP_label.setText("XRP");

        JLabel_ADA_label.setText("ADA");

        JLabel_XLM_label.setText("XLM");

        JLabel_MIOTA_label.setText("MIOTA");

        JLabel_TRX_label.setText("TRX");

        JLabel_VEN_label.setText("VEN");

        JLabel_OMG_label.setText("OMG");

        JLabel_XVG_label.setText("XVG");

        JLabel_KCS_label.setText("KCS");

        JLabel_UTK_label.setText("UTK");

        JTextfield_XRP_value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextfield_XRP_valueActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(51, 51, 51));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        JLabel_BRD_label.setText("BRD");

        JLabel_APPC_label.setText("APPC");

        JLabel_SUB_label.setText("SUB");

        JLabel_CV_label.setText("CV");

        JTextfield_CV_value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextfield_CV_valueActionPerformed(evt);
            }
        });

        JButton_Portfolio_Get_Value.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/calculator.png"))); // NOI18N
        JButton_Portfolio_Get_Value.setText("Get Value");
        JButton_Portfolio_Get_Value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JButton_Portfolio_Get_ValueMouseClicked(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(153, 153, 153));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        JTextArea_portfolio_value.setColumns(20);
        JTextArea_portfolio_value.setRows(5);
        jScrollPane2.setViewportView(JTextArea_portfolio_value);

        JButton_Portfolio_value_chart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/pie_chart.png"))); // NOI18N
        JButton_Portfolio_value_chart.setText("Chart");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_ETH_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_ETH_value, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_BTC_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_BTC_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_ADA_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_ADA_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_XRP_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_XRP_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_OMG_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_OMG_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_XLM_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_XLM_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_MIOTA_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_MIOTA_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_TRX_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_TRX_value))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(JLabel_VEN_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTextfield_VEN_value)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_APPC_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_APPC_value, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_SUB_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_SUB_value))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_CV_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_CV_value))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_BRD_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_BRD_value))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_XVG_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_XVG_value))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_KCS_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_KCS_value))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JLabel_UTK_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JTextfield_UTK_value))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JButton_Portfolio_Get_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JButton_Portfolio_value_chart, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_BTC_label)
                                    .addComponent(JTextfield_BTC_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_ETH_label)
                                    .addComponent(JTextfield_ETH_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_XRP_label)
                                    .addComponent(JTextfield_XRP_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_XVG_label)
                                    .addComponent(JTextfield_XVG_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_KCS_label)
                                    .addComponent(JTextfield_KCS_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_UTK_label)
                                    .addComponent(JTextfield_UTK_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_ADA_label)
                                    .addComponent(JTextfield_ADA_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_XLM_label)
                                    .addComponent(JTextfield_XLM_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_MIOTA_label)
                                    .addComponent(JTextfield_MIOTA_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_TRX_label)
                                    .addComponent(JTextfield_TRX_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_BRD_label)
                                    .addComponent(JTextfield_BRD_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_APPC_label)
                                    .addComponent(JTextfield_APPC_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_SUB_label)
                                    .addComponent(JTextfield_SUB_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_CV_label)
                                    .addComponent(JTextfield_CV_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_VEN_label)
                                    .addComponent(JTextfield_VEN_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabel_OMG_label)
                                    .addComponent(JTextfield_OMG_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JButton_Portfolio_Get_Value)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JButton_Portfolio_value_chart)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 10, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Portfolio", new javax.swing.ImageIcon(getClass().getResource("/crypto_chart/img/wallet.png")), jPanel2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
 
    
    }//GEN-LAST:event_formFocusGained

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//        JLabel_portfolio_value.setVisible(false);
//        JButton_Print_JTable_to_PDF.setVisible(false);
//        JButton_Export_Table_to_Excel_XLS_Format.setVisible(false);
//        jTable1.setVisible(false);

        JLabel_id_cryptocurrency.setVisible(false);
        JLabel_name_cryptocurrency.setVisible(false);
        JLabel_symbol_cryptocurrency.setVisible(false);
        JLabel_rank_cryptocurrency.setVisible(false);
        JLabel_price_usd_cryptocurrency.setVisible(false);
        JLabel_price_btc_cryptocurrency.setVisible(false);
        JLabel_24hr_volume_cryptocurrency.setVisible(false);
        JLabel_market_cap_usd_cryptocurrency.setVisible(false);
        JLabel_available_supply_cryptocurrency.setVisible(false);
        JLabel_total_supply_cryptocurrency.setVisible(false);
        JLabel_max_supply_cryptocurrency.setVisible(false);
        JLabel_percentage_change_1hr_cryptocurrency.setVisible(false);
        JLabel_percentage_change_24hr_cryptocurrency.setVisible(false);
        JLabel_percentage_change_7d_cryptocurrency.setVisible(false);
        JLabel_last_updated_cryptocurrency.setVisible(false);
 
        JLabel_id_of_cryptocurrency_value.setVisible(false);
        JLabel_name_cryptocurrency_value.setVisible(false);
        JLabel_symbol_cryptocurrency_value.setVisible(false);
        JLabel_rank_cryptocurrency_value.setVisible(false);
        JLabel_price_usd_cryptocurrency_value.setVisible(false);
        JLabel_price_btc_cryptocurrency_value.setVisible(false);
        JLabel_24hr_volume_cryptocurrency_value.setVisible(false);
        JLabel_market_cap_usd_cryptocurrency_value.setVisible(false);
        JLabel_available_supply_cryptocurrency_value.setVisible(false);
        JLabel_total_supply_cryptocurrency_value.setVisible(false);
        JLabel_max_supply_cryptocurrency_value.setVisible(false);
        JLabel_percentage_change_1hr_cryptocurrency_value.setVisible(false);
        JLabel_percentage_change_24hr_cryptocurrency_value.setVisible(false);
        JLabel_percentage_change_7d_cryptocurrency_value.setVisible(false);
        JLabel_last_updated_cryptocurrency_value.setVisible(false);

        
    int delay = 000;   // delay for 0 sec.
    int period =300000; // repeat every 5 min/ 300 sec.
    
    java.util.Timer timer_update_from_SERVER = new java.util.Timer();
    
    timer_update_from_SERVER.scheduleAtFixedRate(new TimerTask() {
    public void run() 
    {
        Get_data_from_API();
        //GetURLContent.d("Updating now ...\n");
    }
    }, delay, period);         // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void JComboBox_select_cryptocurrencyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JComboBox_select_cryptocurrencyMouseReleased

    }//GEN-LAST:event_JComboBox_select_cryptocurrencyMouseReleased

    private void JComboBox_select_cryptocurrencyMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JComboBox_select_cryptocurrencyMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_JComboBox_select_cryptocurrencyMouseExited

    private void JButton_Cryptocurrency_chart_EnterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JButton_Cryptocurrency_chart_EnterMouseClicked
    if (JComboBox_select_cryptocurrency.getSelectedIndex() == 0) 
    {
            JOptionPane.showMessageDialog(null, "Please select a CryptoCurrency from the Combobox", "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Please select a CryptoCurrency from the Combobox");                
    }
    else if (JComboBox_select_cryptocurrency.getSelectedIndex() != 0) 
    {
        
    try
     {
        String Jcombobox_selected_crypto_value = JComboBox_select_cryptocurrency.getSelectedItem().toString();
        URL url_crypto = null;
        
        
        if (Jcombobox_selected_crypto_value == "Bitcoin (BTC)") 
        {
           url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/bitcoin/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Ethereum (ETH)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/ethereum/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Ripple (XRP)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/ripple/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Cardano (ADA)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/cardano/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Stellar (XLM)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/stellar/");
        }
        
        else if (Jcombobox_selected_crypto_value == "IOTA (MIOTA)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/iota/");
        }
        
        else if (Jcombobox_selected_crypto_value == "TRON (TRX)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/tron/");
        }
        
        else if (Jcombobox_selected_crypto_value == "VeChain (VEN)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/vechain/");
        }
        
        else if (Jcombobox_selected_crypto_value == "OmiseGO (OMG)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/omisego/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Verge (XVG)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/verge/");
        }
        
        else if (Jcombobox_selected_crypto_value == "KuCoin Shares (KCS)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/kucoin-shares/");
        }
        
        else if (Jcombobox_selected_crypto_value == "UTRUST (UTK)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/utrust/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Bread (BRD)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/bread/");
        }
        
        else if (Jcombobox_selected_crypto_value == "AppCoins (APPC)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/appcoins/");
        }
        
        else if (Jcombobox_selected_crypto_value == "Substratum (SUB)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/substratum/");
        }
        
        else if (Jcombobox_selected_crypto_value == "carVertical (CV)") 
        {
            url_crypto = new URL("https://api.coinmarketcap.com/v1/ticker/carvertical/");
        }
        
        //Continue with the execution
        String[] crypto_coins_array_data = new String[15];
        GetURLContent obj_url_content = new GetURLContent();
        crypto_coins_array_data = obj_url_content.GetURLContent(url_crypto);
        
        JLabel_id_cryptocurrency.setVisible(true);
        JLabel_name_cryptocurrency.setVisible(true);
        JLabel_symbol_cryptocurrency.setVisible(true);
        JLabel_rank_cryptocurrency.setVisible(true);
        JLabel_price_usd_cryptocurrency.setVisible(true);
        JLabel_price_btc_cryptocurrency.setVisible(true);
        JLabel_24hr_volume_cryptocurrency.setVisible(true);
        JLabel_market_cap_usd_cryptocurrency.setVisible(true);
        JLabel_available_supply_cryptocurrency.setVisible(true);
        JLabel_total_supply_cryptocurrency.setVisible(true);
        JLabel_max_supply_cryptocurrency.setVisible(true);
        JLabel_percentage_change_1hr_cryptocurrency.setVisible(true);
        JLabel_percentage_change_24hr_cryptocurrency.setVisible(true);
        JLabel_percentage_change_7d_cryptocurrency.setVisible(true);
        JLabel_last_updated_cryptocurrency.setVisible(true);

        JLabel_id_of_cryptocurrency_value.setVisible(true);
        JLabel_name_cryptocurrency_value.setVisible(true);
        JLabel_symbol_cryptocurrency_value.setVisible(true);
        JLabel_rank_cryptocurrency_value.setVisible(true);
        JLabel_price_usd_cryptocurrency_value.setVisible(true);
        JLabel_price_btc_cryptocurrency_value.setVisible(true);
        JLabel_24hr_volume_cryptocurrency_value.setVisible(true);
        JLabel_market_cap_usd_cryptocurrency_value.setVisible(true);
        JLabel_available_supply_cryptocurrency_value.setVisible(true);
        JLabel_total_supply_cryptocurrency_value.setVisible(true);
        JLabel_max_supply_cryptocurrency_value.setVisible(true);
        JLabel_percentage_change_1hr_cryptocurrency_value.setVisible(true);
        JLabel_percentage_change_24hr_cryptocurrency_value.setVisible(true);
        JLabel_percentage_change_7d_cryptocurrency_value.setVisible(true);
        JLabel_last_updated_cryptocurrency_value.setVisible(true);
        
        int I_counter;
        for (I_counter = 0; I_counter<15; I_counter++)
        {   
            if (crypto_coins_array_data[I_counter] == null || crypto_coins_array_data[I_counter].trim().length() == 0)
            {
                crypto_coins_array_data[I_counter] = "___";
            }
        }
        
        for (int k_counter = 11; k_counter<14; k_counter++)
        {   String text_color;
        
            if (crypto_coins_array_data[k_counter]== null || crypto_coins_array_data[k_counter]=="___")
            {
                crypto_coins_array_data[k_counter] = "<html><font color='orange'>___</font></html>";
            }
            
            else
            {
                double d = Double.parseDouble(crypto_coins_array_data[k_counter]);
                if (d > 1)
                {
                    crypto_coins_array_data[k_counter] = "<html><font color='green'>" + d + "</font></html>";
                }
                else if (d < 1)
                {
                    crypto_coins_array_data[k_counter] = "<html><font color='red'>" + d + "</font></html>";
                }
            }
        }
        
        JLabel_id_of_cryptocurrency_value.setText(crypto_coins_array_data[0]);
        JLabel_name_cryptocurrency_value.setText(crypto_coins_array_data[1]);
        JLabel_symbol_cryptocurrency_value.setText(crypto_coins_array_data[2]);
        JLabel_rank_cryptocurrency_value.setText(crypto_coins_array_data[3]);
        JLabel_price_usd_cryptocurrency_value.setText(crypto_coins_array_data[4]);
        JLabel_price_btc_cryptocurrency_value.setText(crypto_coins_array_data[5]);
        JLabel_24hr_volume_cryptocurrency_value.setText(crypto_coins_array_data[6]);
        JLabel_market_cap_usd_cryptocurrency_value.setText(crypto_coins_array_data[7]);
        JLabel_available_supply_cryptocurrency_value.setText(crypto_coins_array_data[8]);
        JLabel_total_supply_cryptocurrency_value.setText(crypto_coins_array_data[9]);
        JLabel_max_supply_cryptocurrency_value.setText(crypto_coins_array_data[10]);
        JLabel_percentage_change_1hr_cryptocurrency_value.setText(crypto_coins_array_data[11]);
        JLabel_percentage_change_24hr_cryptocurrency_value.setText(crypto_coins_array_data[12]);
        JLabel_percentage_change_7d_cryptocurrency_value.setText(crypto_coins_array_data[13]);
        JLabel_last_updated_cryptocurrency_value.setText(crypto_coins_array_data[14]);

        

        
     }
     catch(Exception excep)
     {
  	System.out.println(excep);
     }
    }
    }//GEN-LAST:event_JButton_Cryptocurrency_chart_EnterMouseClicked

    private void JButton_Export_Table_to_Excel_XLS_FormatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JButton_Export_Table_to_Excel_XLS_FormatMouseClicked

              try 
                {   
                    toExcel(jTable1, new File("result_crypto_data.xls"));
                    
                    JOptionPane.showMessageDialog(null, "Data saved at " +
                            "'result_crypto_data.xls' successfully", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    
                    
                    
                } catch (Exception ex) 
                {
                    ex.printStackTrace();
                }

  	
        

    }//GEN-LAST:event_JButton_Export_Table_to_Excel_XLS_FormatMouseClicked

    private void JButton_Print_JTable_to_PDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JButton_Print_JTable_to_PDFMouseClicked
    MessageFormat header = new MessageFormat("Report Print");
    MessageFormat footer = new MessageFormat("Page 0, number, integer");

    try
    {
            jTable1.print(JTable.PrintMode.NORMAL, header, footer);

    }

    catch (java.awt.print.PrinterException e)
    {
            System.err.format("Cannot print %s%n", e.getMessage());
    }          
    }//GEN-LAST:event_JButton_Print_JTable_to_PDFMouseClicked

    private void JLabel_percentage_change_1hr_cryptocurrency_valueComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JLabel_percentage_change_1hr_cryptocurrency_valueComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_JLabel_percentage_change_1hr_cryptocurrency_valueComponentShown

    private void JLabel_percentage_change_1hr_cryptocurrency_valuePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JLabel_percentage_change_1hr_cryptocurrency_valuePropertyChange

        // TODO add your handling code here:
    }//GEN-LAST:event_JLabel_percentage_change_1hr_cryptocurrency_valuePropertyChange

    private void JTextfield_XRP_valueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextfield_XRP_valueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextfield_XRP_valueActionPerformed

    private void JTextfield_CV_valueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextfield_CV_valueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextfield_CV_valueActionPerformed

    private void JButton_Portfolio_Get_ValueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JButton_Portfolio_Get_ValueMouseClicked
        String BTC_held = JTextfield_BTC_value.getText();
        String ETH_held = JTextfield_ETH_value.getText();
        String XRP_held = JTextfield_XRP_value.getText();
        String ADA_held = JTextfield_ADA_value.getText();
        String XLM_held = JTextfield_XLM_value.getText();
        String MIOTA_held = JTextfield_MIOTA_value.getText();
        String TRX_held = JTextfield_TRX_value.getText();
        String VEN_held = JTextfield_VEN_value.getText();
        String OMG_held = JTextfield_OMG_value.getText();
        String XVG_held = JTextfield_XVG_value.getText();
        String KCS_held = JTextfield_KCS_value.getText();
        String UTK_held = JTextfield_UTK_value.getText();
        String BRD_held = JTextfield_BRD_value.getText();
        String APPC_held = JTextfield_APPC_value.getText();
        String SUB_held = JTextfield_SUB_value.getText();
        String CV_held = JTextfield_CV_value.getText();
        
      if(BTC_held.trim().length() == 0)
       { BTC_held= "" + 0;}
      if(ETH_held.trim().length() == 0)
       { ETH_held= "" + 0;}
      if(XRP_held.trim().length() == 0)
       { XRP_held= "" + 0;}
      if(ADA_held.trim().length() == 0)
       { ADA_held= "" + 0;}
      if(XLM_held.trim().length() == 0)
       { XLM_held= "" + 0;}
      if(MIOTA_held.trim().length() == 0)
       { MIOTA_held= "" + 0;}
      if(TRX_held.trim().length() == 0)
       { TRX_held= "" + 0;}
      if(VEN_held.trim().length() == 0)
       { VEN_held= "" + 0;}
      if(OMG_held.trim().length() == 0)
       { OMG_held= "" + 0;}
      if(XVG_held.trim().length() == 0)
       { XVG_held= "" + 0;}
      if(KCS_held.trim().length() == 0)
       { KCS_held= "" + 0;}
      if(UTK_held.trim().length() == 0)
       { UTK_held= "" + 0;}
      if(BRD_held.trim().length() == 0)
       { BRD_held= "" + 0;}
      if(APPC_held.trim().length() == 0)
       { APPC_held= "" + 0;}
      if(SUB_held.trim().length() == 0)
       { SUB_held= "" + 0;}
      if(CV_held.trim().length() == 0)
       { CV_held= "" + 0;}
        
        Portfolio_Value val = new Portfolio_Value();
        String results_portfolio = val.portfolio_value_calculation(BTC_held, ETH_held, XRP_held, ADA_held, XLM_held, MIOTA_held, TRX_held, VEN_held, OMG_held, XVG_held, KCS_held, UTK_held, BRD_held, APPC_held, SUB_held, CV_held);
        
        JTextArea_portfolio_value.setText(results_portfolio);
    }//GEN-LAST:event_JButton_Portfolio_Get_ValueMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crypto_Chart_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crypto_Chart_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crypto_Chart_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crypto_Chart_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new Crypto_Chart_UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JButton_Cryptocurrency_chart_Enter;
    private javax.swing.JButton JButton_Export_Table_to_Excel_XLS_Format;
    private javax.swing.JButton JButton_Portfolio_Get_Value;
    private javax.swing.JButton JButton_Portfolio_value_chart;
    private javax.swing.JButton JButton_Print_JTable_to_PDF;
    private javax.swing.JComboBox<String> JComboBox_select_cryptocurrency;
    private javax.swing.JLabel JLabel_24hr_volume_cryptocurrency;
    private javax.swing.JLabel JLabel_24hr_volume_cryptocurrency_value;
    private javax.swing.JLabel JLabel_ADA_label;
    private javax.swing.JLabel JLabel_APPC_label;
    private javax.swing.JLabel JLabel_BRD_label;
    private javax.swing.JLabel JLabel_BTC_label;
    private javax.swing.JLabel JLabel_CV_label;
    private javax.swing.JLabel JLabel_ETH_label;
    private javax.swing.JLabel JLabel_KCS_label;
    private javax.swing.JLabel JLabel_MIOTA_label;
    private javax.swing.JLabel JLabel_OMG_label;
    private javax.swing.JLabel JLabel_SUB_label;
    private javax.swing.JLabel JLabel_TRX_label;
    private javax.swing.JLabel JLabel_UTK_label;
    private javax.swing.JLabel JLabel_VEN_label;
    private javax.swing.JLabel JLabel_XLM_label;
    private javax.swing.JLabel JLabel_XRP_label;
    private javax.swing.JLabel JLabel_XVG_label;
    private javax.swing.JLabel JLabel_available_supply_cryptocurrency;
    private javax.swing.JLabel JLabel_available_supply_cryptocurrency_value;
    private javax.swing.JLabel JLabel_id_cryptocurrency;
    private javax.swing.JLabel JLabel_id_of_cryptocurrency_value;
    private javax.swing.JLabel JLabel_last_updated_cryptocurrency;
    private javax.swing.JLabel JLabel_last_updated_cryptocurrency_value;
    private javax.swing.JLabel JLabel_market_cap_usd_cryptocurrency;
    private javax.swing.JLabel JLabel_market_cap_usd_cryptocurrency_value;
    private javax.swing.JLabel JLabel_max_supply_cryptocurrency;
    private javax.swing.JLabel JLabel_max_supply_cryptocurrency_value;
    private javax.swing.JLabel JLabel_name_cryptocurrency;
    private javax.swing.JLabel JLabel_name_cryptocurrency_value;
    private javax.swing.JLabel JLabel_percentage_change_1hr_cryptocurrency;
    private javax.swing.JLabel JLabel_percentage_change_1hr_cryptocurrency_value;
    private javax.swing.JLabel JLabel_percentage_change_24hr_cryptocurrency;
    private javax.swing.JLabel JLabel_percentage_change_24hr_cryptocurrency_value;
    private javax.swing.JLabel JLabel_percentage_change_7d_cryptocurrency;
    private javax.swing.JLabel JLabel_percentage_change_7d_cryptocurrency_value;
    private javax.swing.JLabel JLabel_price_btc_cryptocurrency;
    private javax.swing.JLabel JLabel_price_btc_cryptocurrency_value;
    private javax.swing.JLabel JLabel_price_usd_cryptocurrency;
    private javax.swing.JLabel JLabel_price_usd_cryptocurrency_value;
    private javax.swing.JLabel JLabel_rank_cryptocurrency;
    private javax.swing.JLabel JLabel_rank_cryptocurrency_value;
    private javax.swing.JLabel JLabel_select_cryptocurrency;
    private javax.swing.JLabel JLabel_symbol_cryptocurrency;
    private javax.swing.JLabel JLabel_symbol_cryptocurrency_value;
    private javax.swing.JLabel JLabel_total_supply_cryptocurrency;
    private javax.swing.JLabel JLabel_total_supply_cryptocurrency_value;
    private javax.swing.JPanel JPanel_cryptocurrency;
    private javax.swing.JTextArea JTextArea_portfolio_value;
    private javax.swing.JTextField JTextfield_ADA_value;
    private javax.swing.JTextField JTextfield_APPC_value;
    private javax.swing.JTextField JTextfield_BRD_value;
    private javax.swing.JTextField JTextfield_BTC_value;
    private javax.swing.JTextField JTextfield_CV_value;
    private javax.swing.JTextField JTextfield_ETH_value;
    private javax.swing.JTextField JTextfield_KCS_value;
    private javax.swing.JTextField JTextfield_MIOTA_value;
    private javax.swing.JTextField JTextfield_OMG_value;
    private javax.swing.JTextField JTextfield_SUB_value;
    private javax.swing.JTextField JTextfield_TRX_value;
    private javax.swing.JTextField JTextfield_UTK_value;
    private javax.swing.JTextField JTextfield_VEN_value;
    private javax.swing.JTextField JTextfield_XLM_value;
    private javax.swing.JTextField JTextfield_XRP_value;
    private javax.swing.JTextField JTextfield_XVG_value;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


    private void setIcon() 
    {  try 
       {
          java.awt.Image icon = ImageIO.read(this.getClass().getResource("./img/coins.png"));
          this.setIconImage(icon);
       } 
        catch (Exception ex) 
        {
            System.out.println("Error on setting icon");
            
        }
   }
    
    
    public void Get_data_from_API()
    {
        try 
           {    
            URL url,url_2,url_3,url_4;
            URL url_5,url_6,url_7;
            URL url_8,url_9,url_10,url_11;
            URL url_12,url_13,url_14,url_15,url_16;
            GetURLContent url_content = new GetURLContent();
            Object[]crypto_table_filler = new Object[15];
            DefaultTableModel model = null;
            String[] data_from_crypto_coins_array = new String[15];
            
            
            String[]title = {"id","name","symbol","rank","price_usd","price_btc","24h_volume_usd","market_cap_usd","available_supply","total_supply","max_supply","percent_change_1h","percent_change_24h","percent_change_7d","last_updated"};

            model = new DefaultTableModel(null,title)
              {};
            
            
            url = new URL("https://api.coinmarketcap.com/v1/ticker/bitcoin/");
            data_from_crypto_coins_array = url_content.GetURLContent(url);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler);    
            
            
            url_2 = new URL("https://api.coinmarketcap.com/v1/ticker/ethereum/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_2);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_3 = new URL("https://api.coinmarketcap.com/v1/ticker/ripple/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_3);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_4 = new URL("https://api.coinmarketcap.com/v1/ticker/cardano/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_4);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_5 = new URL("https://api.coinmarketcap.com/v1/ticker/stellar/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_5);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_6 = new URL("https://api.coinmarketcap.com/v1/ticker/iota/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_6);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_7 = new URL("https://api.coinmarketcap.com/v1/ticker/tron/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_7);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_8 = new URL("https://api.coinmarketcap.com/v1/ticker/vechain/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_8);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_9 = new URL("https://api.coinmarketcap.com/v1/ticker/omisego/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_9);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_10 = new URL("https://api.coinmarketcap.com/v1/ticker/verge/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_10);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_11 = new URL("https://api.coinmarketcap.com/v1/ticker/kucoin-shares/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_11);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_12 = new URL("https://api.coinmarketcap.com/v1/ticker/utrust/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_12);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_13 = new URL("https://api.coinmarketcap.com/v1/ticker/bread/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_13);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_14 = new URL("https://api.coinmarketcap.com/v1/ticker/appcoins/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_14);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_15 = new URL("https://api.coinmarketcap.com/v1/ticker/substratum/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_15);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            url_16 = new URL("https://api.coinmarketcap.com/v1/ticker/carvertical/");
            data_from_crypto_coins_array = url_content.GetURLContent(url_16);
            for(int i =0;i < data_from_crypto_coins_array.length;i++)
            crypto_table_filler[i] = data_from_crypto_coins_array[i];
            model.addRow(crypto_table_filler); 
            
            
            
            jTable1.setModel(model);
            
            // Set custom price color renderer
	    PriceChangeColorRenderer colorRenderer = new PriceChangeColorRenderer();
            jTable1.setDefaultRenderer(Object.class, colorRenderer);
            
                
            //jTable1.setUpdateSelectionOnSort(true);
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
        JButton_Print_JTable_to_PDF.setVisible(true);
        JButton_Export_Table_to_Excel_XLS_Format.setVisible(true);
        jTable1.setVisible(true);
            
        } 
        catch (Exception ex) 
        {
            System.out.println("Error --> " + ex);
            
        } 
    }


public void toExcel(JTable table, File file){
    try{
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        FileWriter excel = new FileWriter(file);

        for(int i = 0; i < model.getColumnCount(); i++)
        {
            excel.write(model.getColumnName(i) + "\t");
        }

        excel.write("\n");

        for(int i=0; i< model.getRowCount(); i++) {
            for(int j=0; j < model.getColumnCount(); j++) 
            {
                if (model.getValueAt(i,j)== null)
                {
                    GetURLContent.d("[" + i + ","+ j + "] --> NULL ");
                     excel.write(""+ "\t");
                }
                else if (model.getValueAt(i,j)!=null)
                { 
                    excel.write(model.getValueAt(i,j).toString()+"\t");
                }
            }
            excel.write("\n");
        }

        excel.close();

    }catch(IOException e){ System.out.println(e); }
}


}
